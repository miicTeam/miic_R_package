% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tmiic.plot.R
\name{plot.tmiic}
\alias{plot.tmiic}
\title{Basic plot function of a tmiic network inference result}
\usage{
\method{plot}{tmiic}(
  x,
  flatten_mode = "normal",
  show_self_loops = TRUE,
  method = "igraph",
  ...
)
}
\arguments{
\item{x}{[a tmiic graph object]
The graph object returned by \code{\link{miic}} in temporal mode}

\item{flatten_mode}{[a string]. Optional, default value "normal".
Possible values are \emph{"none"}, \emph{"normal"}, \emph{"combine"}, 
\emph{"unique"}, \emph{"drop"}:
\itemize{
\item When \emph{flatten_mode} = \emph{"none"}, the plot function will
  use the tmiic graph object as it, leading to the display of a lagged
  graph. Unless a specific layout is specified, nodes will be positioned 
  on a grid. 
\item When \emph{flatten_mode} = \emph{"normal"}, the default, nodes 
  and edges are converted into a flattened version to produce a compact 
  view of the temporal network whilst still presenting all the information
  in the plotting.\cr
  i.e.: X_lag1->Y_lag0, X_lag2<-Y_lag0 become respectively X->Y lag=1, 
  X<-Y lag=2.  
\item When \emph{flatten_mode} = \emph{"combine"}, prior to the plotting,
  a preprocessing will be applied to kept only one edge
  per couple of nodes. The log_confidence will be the highest one 
  of the summarized edges whilst the lag and orientation of the
  summarized edge will be an aggregation.\cr 
  i.e.: X_lag1->Y_lag0, X_lag2<-Y_lag0 will become X<->Y lag=1,2 with
  the log_confidence of X_lag1->Y_lag0 if log_confidence of 
  X_lag1->Y_lag0 > X_lag2<-Y_lag0.
\item When \emph{flatten_mode} = \emph{"unique"}, prior to the plotting,
  a preprocessing will be applied to kept only the edges having the
  highest log_confidence for a couple of nodes. 
  If several edges between the sames nodes have the same
  log_confidence, then the edge kept is the one with the minimum lag.\cr 
  i.e.: X_lag1->Y_lag0, X_lag2<-Y_lag0 with log_confidence of 
  X_lag1->Y_lag0 > X_lag2<-Y_lag0 become X->Y lag=1.
\item When \emph{flatten_mode} = \emph{"drop"}, prior to the plotting,
  a preprocessing will be applied to kept only the edges having the 
  highest log_confidence for a couple of nodes. 
  If several edges between the sames nodes have the same
  log_confidence, then the edge kept is the one with the minimum lag.\cr
  i.e. :  X_lag1->Y_lag0, X_lag2<-Y_lag0 with log_confidence of 
  X_lag1->Y_lag0 > X_lag2<-Y_lag0 become X->Y. 
  The lag information is dropped during the preprocessing and 
  will not be displayed on the final plotting.
}}

\item{show_self_loops}{[a boolean] Optional, TRUE by default.
When TRUE, the edges like X_lag0-X_lag1 are included in the iGraph object. 
When FALSE, only edges having different nodes are present in the iGraph 
object.}

\item{method}{A string representing the plotting method. Default to "igraph".
Currently only "igraph" is supported.}

\item{\dots}{Additional plotting parameters. See the corresponding plot function
for the complete list.

For igraph, see \code{\link[igraph]{igraph.plotting}}.}
}
\description{
This function calls \code{\link{tmiic.export}} to build a
plottable object from the result returned by \code{\link{miic}} in 
temporal mode and plot it.
}
\details{
See the documentation of \code{\link{tmiic.export}} for further
details.
}
\examples{
library(miic)

#' # EXAMPLE COVID CASES (timeseries demo)
data(covidCases)
# execute MIIC (reconstruct graph in temporal mode)
tmiic.res <- miic(input_data = covidCases, tau = 2, movavg = 14)

# to plot the default compact graph
if(require(igraph)) {
 plot(tmiic.res)
 
# to plot the full temporal graph
if(require(igraph)) {
 plot(tmiic.res, flatten_mode="none")
}

}
}
\seealso{
\code{\link{tmiic.export}} for generic exports,
\code{\link{tmiic.getIgraph}} for igraph export,
\code{\link[igraph]{igraph.plotting}}
}
