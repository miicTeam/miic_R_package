% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tmiic.wrapper.R
\name{tmiic.transform_data_for_miic}
\alias{tmiic.transform_data_for_miic}
\title{tmiic.transform_data_for_miic}
\usage{
tmiic.transform_data_for_miic(
  data_tab,
  tau,
  categoryOrder = NULL,
  movavg = -1,
  subtiming = -1,
  bootstrap = -1
)
}
\arguments{
\item{data_tab}{[a 2D or 3D array] 
An array of the time series for all nodes and samples of dimensions
[n_samples * n_nodes * n_time] for 3D or [n_nodes * n_time] for 2D.
When a 2D array is supplied, the number of samples is assumed to be 1.}

\item{tau}{[an int > 0] A strictly positive int defining the max lag.}

\item{categoryOrder}{[a data frame] Optional, NULL by default. 
A data frame giving information about how to order the various states of 
categorical variables. This data frame will be lagged as the input 
data on \emph{tau} timesteps.}

\item{movavg}{[an integer] Optional, -1 by default.\cr
When \emph{movavg} is supplied (integer > 1), a moving average 
operation is applied to the time series.\cr
Note that when both moving average and subtiming are applied,
the moving average is performed before the subtiming.}

\item{subtiming}{[an integer] Optional, -1 by default.\cr
When \emph{subtiming} is supplied (integer > 1), the time series will be 
subtimed using 1 timestep every \emph{subtiming} timesteps starting from
the last.\cr 
i.e.: on 1000 timesteps with \emph{subtiming} = 7, the  timesteps kept
will be 1000, 993, 986, ..., 13, 6.\cr
Note that when both moving average and subtiming are applied,
the moving average is performed before the subtiming.}

\item{bootstrap}{[an int] Optional, default=-1.\cr
Experimental. When -1, no bootstraping is performed. 
When > 0, select randomly \emph{bootstrap} lagged samples (the samples 
obtained after transformation of the input samples over \emph{tau} 
timesteps).\cr
As normal when using bootstrapping, the \emph{bootstrap} value can be
greater than the number of lagged samples as a lagged sample can be  
selected more than once.}
}
\value{
a 2D array of dimensions [ n_samples * (n_time -  \emph{tau}) ), 
                                   n_nodes * ( \emph{tau}+1) ]
}
\description{
Reorganizes the data using the history to create lagged nodes and extra 
samples in a format usable by miic
}
\details{
The function slices the input data according to the lag max argument 
\emph{tau}. Data are expected to be received in a 3 dimensional array 
[n_samples * n_nodes * n_time]. History is assumed to be time ordered from 
the oldest (first rows) to lastest (ending rows).

The number of nodes is increased and renamed on \emph{tau} layers.\cr 
i.e. with \emph{tau}=2: node1, node2 => node1_lag0, node2_lag0, node1_lag1, 
node2_lag1, node1_lag2, node2_lag2.

Every timestep (until number of timesteps - \emph{tau}) is converted into 
a sample in the lagged graph:

\tabular{ccccccc}{
Timestep \tab  Node & value  \tab  Node & value  \tab => \tab Sample \tab  Node & value  \tab  Node & value \cr
  t-2    \tab node1_val(t-2) \tab node2_val(t-2) \tab => \tab   i    \tab node1_lag2_val \tab node2_lag2_val\cr
  t-1    \tab node1_val(t-1) \tab node2_val(t-1) \tab => \tab   i    \tab node1_lag1_val \tab node2_lag1_val\cr
   t     \tab  node1_val(t)  \tab  node2_val(t)  \tab => \tab   i    \tab node1_lag0_val \tab node2_lag0_val\cr
  \cr    \tab                \tab                \tab    \tab        \tab                \tab               \cr
  t-3    \tab node1_val(t-3) \tab node2_val(t-3) \tab => \tab   i'   \tab node1_lag2_val \tab node2_lag2_val\cr
  t-2    \tab node1_val(t-2) \tab node2_val(t-2) \tab => \tab   i'   \tab node1_lag1_val \tab node2_lag1_val\cr
  t-1    \tab node1_val(t-1) \tab node2_val(t-1) \tab => \tab   i'   \tab node1_lag0_val \tab node2_lag0_val\cr
  \cr    \tab                \tab                \tab    \tab        \tab                \tab               \cr
  t-4    \tab node1_val(t-4) \tab node2_val(t-4) \tab => \tab   i"   \tab node1_lag2_val \tab node2_lag2_val\cr
  t-3    \tab node1_val(t-3) \tab node2_val(t-3) \tab => \tab   i"   \tab node1_lag1_val \tab node2_lag1_val\cr
  t-2    \tab node1_val(t-2) \tab node2_val(t-2) \tab => \tab   i"   \tab node1_lag0_val \tab node2_lag0_val\cr
  \cr    \tab                \tab                \tab    \tab        \tab                \tab               \cr
  ...    \tab .............. \tab .............. \tab => \tab ...... \tab .............. \tab ............. \cr
}
until number of timesteps - \emph{tau} is reached. The same process is applied
to all input samples.
}
