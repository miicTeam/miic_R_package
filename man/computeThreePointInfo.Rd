% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computeInformation.R
\name{computeThreePointInfo}
\alias{computeThreePointInfo}
\title{Compute (conditional) three-point information}
\usage{
computeThreePointInfo(
  X,
  Y,
  Z,
  df_conditioning = NULL,
  maxbins = NULL,
  cplx = c("nml", "mdl"),
  n_eff = -1,
  sample_weights = NULL,
  is_continuous = NULL
)
}
\arguments{
\item{X}{[a vector]
A vector that contains the observational data of the first variable.}

\item{Y}{[a vector]
A vector that contains the observational data of the second variable.}

\item{Z}{[a vector]
A vector that contains the observational data of the third variable.}

\item{df_conditioning}{[a data frame]
The data frame of the observations of the set of conditioning variables
\eqn{U}.}

\item{maxbins}{[an integer]
When the data contain continuous variables, the maximum number of bins
allowed during the discretization. A smaller number makes the computation
faster, a larger number allows finer discretization.}

\item{cplx}{[a string]
The complexity model:
\itemize{
\item["mdl"] Minimum description Length
\item["nml"] Normalized Maximum Likelihood, less costly compared to "mdl" in
the finite sample case and will allow for more bins.
}}

\item{n_eff}{[an integer]
The number of effective samples. When there is significant autocorrelation in
the samples you may want to specify a number of effective samples that is
lower than the number of points in the distribution.}

\item{sample_weights}{[a vector of floats]
Individual weights for each sample, used for the same reason as the effective
sample number but with individual precision.}

\item{is_continuous}{[a vector of booleans]
Specify if each variable is to be treated as continuous (TRUE) or discrete
(FALSE), must be of length `ncol(df_conditioning) + 2`, in the order
\eqn{X, Y, U1, U2, ...}. If not specified, factors and character vectors are
considered as discrete, and numerical vectors as continuous.}
}
\value{
A list that contains :
\itemize{
\item I3: The estimation of (conditional) three-point information without the
complexity cost.
\item I3k: The estimation of (conditional) three-point information with the
complexity cost (\eqn{I3k = I3 - cplx}).
\item I2: For reference, the estimation of (conditional) mutual information
\eqn{I(X;Y|U)} used in the estimation of \eqn{I3}.
\item I2k: For reference, the estimation of regularized (conditional) mutual
information \eqn{Ik(X;Y|U)} used in the estimation of \eqn{I3k}.
}
}
\description{
Three point information is defined based on mutual information.
For discrete variables, the computation is based on the
empirical frequency minus a complexity cost (computed as BIC or with the
Normalized Maximum Likelihood). When continuous variables are present, each
continuous variable is discretized where the partitioning is chosen by
maximizing the mutual information minus the complexity cost.
}
\details{
For variables \eqn{X}, \eqn{Y}, \eqn{Z} and a set of conditioning
variables \eqn{U}, the conditional three point information is defined as
\deqn{Ik(X;Y;Z|U) = Ik(X;Y|U) - Ik(X;Y|U,Z)}, where \eqn{Ik} is the
regularized conditional mutual information.
See \code{\link{computeMutualInfo}} for the definition of \eqn{Ik}.
}
\examples{
library(miic)
N <- 1000
# Dependence, conditional independence : X <- Z -> Y
Z <- runif(N)
X <- Z * 2 + rnorm(N, sd = 0.2)
Y <- Z * 2 + rnorm(N, sd = 0.2)
res <- computeThreePointInfo(X, Y, Z)
message("I(X;Y;Z) = ", res$I3)
message("Ik(X;Y;Z) = ", res$I3k)

\donttest{
# Independence, conditional dependence : X -> Z <- Y
X <- runif(N)
Y <- runif(N)
Z <- X + Y + rnorm(N, sd = 0.1)
res <- computeThreePointInfo(X, Y, Z)
message("I(X;Y;Z) = ", res$I3)
message("Ik(X;Y;Z) = ", res$I3k)
}

}
\references{
\itemize{
\item Verny et al., \emph{PLoS Comp. Bio. 2017.}
  https://doi.org/10.1371/journal.pcbi.1005662
\item Cabeli et al., \emph{PLoS Comp. Bio. 2020.}
  https://doi.org/10.1371/journal.pcbi.1007866
\item Affeldt et al., \emph{Bioinformatics 2016}
}
}
