// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mydiscretizeMDL
List mydiscretizeMDL(SEXP RmyDist, SEXP RmaxBins);
RcppExport SEXP _miic_mydiscretizeMDL(SEXP RmyDistSEXP, SEXP RmaxBinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type RmyDist(RmyDistSEXP);
    Rcpp::traits::input_parameter< SEXP >::type RmaxBins(RmaxBinsSEXP);
    rcpp_result_gen = Rcpp::wrap(mydiscretizeMDL(RmyDist, RmaxBins));
    return rcpp_result_gen;
END_RCPP
}
// mydiscretizeMutual
List mydiscretizeMutual(List input_data, List arg_list);
RcppExport SEXP _miic_mydiscretizeMutual(SEXP input_dataSEXP, SEXP arg_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input_data(input_dataSEXP);
    Rcpp::traits::input_parameter< List >::type arg_list(arg_listSEXP);
    rcpp_result_gen = Rcpp::wrap(mydiscretizeMutual(input_data, arg_list));
    return rcpp_result_gen;
END_RCPP
}
// miicRGetInfo3Point
List miicRGetInfo3Point(List input_data, List arg_list);
RcppExport SEXP _miic_miicRGetInfo3Point(SEXP input_dataSEXP, SEXP arg_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input_data(input_dataSEXP);
    Rcpp::traits::input_parameter< List >::type arg_list(arg_listSEXP);
    rcpp_result_gen = Rcpp::wrap(miicRGetInfo3Point(input_data, arg_list));
    return rcpp_result_gen;
END_RCPP
}
// reconstruct
List reconstruct(List input_data, List arg_list);
RcppExport SEXP _miic_reconstruct(SEXP input_dataSEXP, SEXP arg_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input_data(input_dataSEXP);
    Rcpp::traits::input_parameter< List >::type arg_list(arg_listSEXP);
    rcpp_result_gen = Rcpp::wrap(reconstruct(input_data, arg_list));
    return rcpp_result_gen;
END_RCPP
}
// lagData
List lagData(List input_data, List arg_list);
RcppExport SEXP _miic_lagData(SEXP input_dataSEXP, SEXP arg_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type input_data(input_dataSEXP);
    Rcpp::traits::input_parameter< List >::type arg_list(arg_listSEXP);
    rcpp_result_gen = Rcpp::wrap(lagData(input_data, arg_list));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_miic_mydiscretizeMDL", (DL_FUNC) &_miic_mydiscretizeMDL, 2},
    {"_miic_mydiscretizeMutual", (DL_FUNC) &_miic_mydiscretizeMutual, 2},
    {"_miic_miicRGetInfo3Point", (DL_FUNC) &_miic_miicRGetInfo3Point, 2},
    {"_miic_reconstruct", (DL_FUNC) &_miic_reconstruct, 2},
    {"_miic_lagData", (DL_FUNC) &_miic_lagData, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_miic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
